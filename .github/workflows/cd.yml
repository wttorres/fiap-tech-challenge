name: CD - Build & Push

on:  
  workflow_run:
    workflows: [ "CI - Tests" ]
    types:
      - completed
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  IMAGE_NAME: gamestore
  PROJECT_PATH: ./src/TechChallenge.GameStore.WebApi/TechChallenge.GameStore.WebApi.csproj
  STARTUP_PATH: ./src/TechChallenge.GameStore.WebApi/TechChallenge.GameStore.WebApi.csproj
  POSTGRES_CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
  JWT_KEY: ${{ secrets.JWT_KEY }}
  JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
  JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}

jobs:
  migrations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Instalar .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore & Build
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Instalar EF Core
        run: dotnet tool install --global dotnet-ef --version 8.*

      - name: Rodar migrations
        run: |
          "$HOME/.dotnet/tools/dotnet-ef" database update \
            --project src/TechChallenge.GameStore.Infrastructure \
            --startup-project src/TechChallenge.GameStore.WebApi

  build-and-push:
    runs-on: ubuntu-latest
    needs: migrations
    outputs:
      image_tag: ${{ steps.out.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - uses: docker/setup-buildx-action@v3

      - name: Compute image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short,prefix=sha-

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          provenance: false

      - name: Expor tag gerada
        id: out
        run: |
          TAG="$(echo '${{ steps.meta.outputs.tags }}' | tail -n1 | awk -F: '{print $2}')"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      REGISTRY: ${{ secrets.REGISTRY }}
      APP:      ${{ secrets.AZURE_CONTAINERAPP }}
      RG:       ${{ secrets.AZURE_RG }}
      IMG_TAG:  ${{ needs.build-and-push.outputs.image_tag }}
    steps:
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Set subscription explicitly
        run: az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" 

      - name: Who am I / Subscription sanity check
        run: |
          az account show -o jsonc
          echo "SUB: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  RG: ${{ secrets.AZURE_RG }}  APP: ${{ secrets.AZURE_CONTAINERAPP }}"
          az group show -n "${{ secrets.AZURE_RG }}" -o table
          az containerapp show -g "${{ secrets.AZURE_RG }}" -n "${{ secrets.AZURE_CONTAINERAPP }}" -o table
          
      - name: Atualizar secrets no Container App
        run: |
          az containerapp secret set -g "$RG" -n "$APP" \
            --secrets \
              postgres-conn="${POSTGRES_CONNECTION_STRING}" \
              jwt-key="${JWT_KEY}" \
              jwt-issuer="${JWT_ISSUER}" \
              jwt-audience="${JWT_AUDIENCE}"