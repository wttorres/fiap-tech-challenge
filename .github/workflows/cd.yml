name: CD - Build & Push + Migrate

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  IMAGE_NAME: gamestore
  PROJECT_PATH: ./src/TechChallenge.GameStore.WebApi/TechChallenge.GameStore.WebApi.csproj
  STARTUP_PATH: ./src/TechChallenge.GameStore.WebApi/TechChallenge.GameStore.WebApi.csproj

jobs:
  migrate-db:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # PASSO 1 (AJUSTADO): Instala a ferramenta e adiciona ao PATH do workflow
      - name: Install and Configure .NET EF Tool
        run: |
          dotnet tool install --global dotnet-ef --version 8.*
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # PASSO 2 (ADICIONADO): Restaura as dependências do projeto
      - name: Restore Dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      # PASSO 3 (AJUSTADO): A linha "export PATH" foi removida, pois agora é desnecessária
      - name: Build EF Migration Bundle
        run: |
          dotnet ef migrations bundle \
            --project ${{ env.PROJECT_PATH }} \
            --startup-project ${{ env.STARTUP_PATH }} \
            --configuration Release \
            --output efbundle

      - name: Apply migrations
        env:
          CONNECTION_STRING: ${{ secrets.POSTGRES_CONNECTION_STRING }}
        run: |
          chmod +x ./efbundle
          ./efbundle --connection "$CONNECTION_STRING"

  build-and-push:
    needs: [migrate-db]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to ACR (user/password)
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute Tags
        id: meta
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
        run: |
          IMG="${REGISTRY}/${{ env.IMAGE_NAME }}"
          echo "latest=${IMG}:latest" >> $GITHUB_OUTPUT
          echo "sha=${IMG}:sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.latest }}
            ${{ steps.meta.outputs.sha }}
          provenance: false
